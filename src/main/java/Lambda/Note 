
            Mean topic here >?

    1) we creating interface  with no body method (And we are Calling Class from where)

                @FunctionalInterface
                public interface ApplePredicate {
                    boolean test(Apple apple);
                }

    2) we are creating class and implementation interface with method as @Override
                        (and in method we are Calling from Apple Getter Weight and compering with >200)

                public class AppleHeavyPredicate implements ApplePredicate{
                    @Override
                    public boolean test(Apple apple) {
                        return apple.getWeight()>200;
                    }

    3) know we are creating method in main method but outside of brackets
        We are creating List "List<Apple>" of Apple in first argument but in second argument we are creating Interface
        rezone Inheritance Parents and Child relationship

        we Creating or singing for list<Apple>  = new Variable as result to return final result
        Creating For each loop => "more easy" From Apple class with name apple do loop Inventory
        from argument first List <apple> but name is inventory
              and we are creating if statement from interface call method test Filter apples from apple Class
        and as List have method add we call lIst name result.add(apple) add from class Apple but name as apple
        and return as answer result

                                                            // type as List       // As Object = > new Object
                   private static List<Apple> filterApples(List<Apple> inventory, ApplePredicate applePredicate) {
                       List<Apple> result = new ArrayList<>();
                       for (Apple apple : inventory) {
                           if (applePredicate.test(apple)) {
                               result.add(apple);
                           }
                       }
                       return result;
                   }
               }


        4) when we are  calling method filterApples(inventory,Child Class from Interface )
           we can call  as new object as  abc

                AppleHeavyPredicate abc = new AppleHeavyPredicate();
                List<Apple> heavyApple = filterApples(inventory,  abc); // abc
                System.out.println(heavyApple);


             or we can directly from new Child Class of Interface

                List<Apple> greenApple = filterApples(inventory, new AppleGreenColorPredicate()); //abc
                System.out.println(greenApple);


         =======================================================================================
         5)       /// with Lambda

         before we are using Child class of Interface no with Lambda we no need below i will do

             public class AppleHeavyPredicate implements ApplePredicate{
                             @Override
                             public boolean test(Apple apple) {
                                 return apple.getWeight()>200;
                             }

         After we will use Lambda
         we will start step by step from here

          public boolean test(Apple apple) {
                                          return apple.getWeight()>200;
                                      }


         // "public" => no need"

           boolean test(Apple apple) {
                                          return apple.getWeight()>200;
                                      }

         //method name - No Needed  return no need too

            boolean (Apple apple) {
                                   apple.getWeight()>200;
                                   }

         //return type - Compiler configure out by looking at the code
         // "boolean" => no need"

           (Apple apple) {
                          apple.getWeight()>200;
                           }

         // if we know from where we calling we no need apple
          (Apple) {
                                   apple.getWeight()>200;
                                    }

          // No need {}    and as Lambda ->
            (Apple) ->  apple.getWeight()>200;

          // so final result

         ApplePredicate weightApple = Apple -> apple.getWeight()>200


            RULE FOR LAMBDA
         1) Functional Interface(only 1 abstract method with no body)
         2) Method Abstract method have to same signature with LAMBDA


         /// Conclusion
         We can create method and one of that Argument can be Interface
         ^^^method from top number 3            // interface
         filterApples(inventory, new AppleGreenColorPredicate());

         ApplePredicate weightApple = Apple -> apple.getWeight()>200
         filterApples(inventory, weightApple);
                        or:
          filterApples(inventory, Apple -> apple.getWeight()>200);